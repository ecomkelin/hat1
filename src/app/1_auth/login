const path = require('path');
const resJson = require(path.resolve(process.cwd(), "src/resJson"));
const UserDS = require(path.resolve(process.cwd(), "src/models/User/dbServer"));

const format_phonePre = require(path.resolve(process.cwd(), "src/extra/format/phonePre"));

module.exports = docName => async(ctx, next) => {
    const position = "controller login";
    try{
		const DS = (docName === "User") ? UserDS : null;	// 判断是哪个数据库在登录

		const res_payload = await obt_payload(ctx.request.body, DS);
		if(res_payload.status !== 200) return resJson.failure(ctx, res_payload);

		return resJson.success(ctx, {...res_payload, position, message: "登录成功"})
        const res = await DS.findOne(payload, paramObj);
        return resJson.success(ctx, res);
    } catch(err) {
        return resJson.errs(ctx, {position, err});
    }
};

const obt_payload = (body, DS) => {
	const position = "obt_payload"
	return new Promise(async(resolve, reject) => {
		try {
			const type_login = body.type_login;
			if(type_login === "hat") {
				const hat = body.hat;
				if(!hat) return resolve({status: 400, position, message: "请输入正确的 hat 参数 "});
				const match = {};
				if(hat.code) {
					match.code = hat.code.replace(/^\s*/g,"");
				} else if(hat.email) {
					match.email = hat.email.replace(/^\s*/g,"");
				} else {
					let {phonePre, phoneNum} = hat;
					phonePre = phoneNum ? format_phonePre(phonePre) : undefined;
					match.phone = phoneNum ? phonePre+phoneNum : undefined;
				}
				const res_object = await DS.findOne({}, {match, select: {}});
				if(res_object.status !== 200) return resolve({status: 400, position, message: "账号错误"});
				const object = res_object.data.object;

				// const res_pwd_match = await MdFilter.matchBcryptProm(hat.pwd, object.pwd);
				// if(res_pwd_match.status != 200) return resolve({status: 400, position, message: "密码错误"});
				if(hat.pwd !== object.pwd) return resolve({status: 400, position, message: "密码错误"});
				return resolve({status: 200, data: {object}});
			} else {
				return resolve({status: 400, position, message: "请输入正确的 [type_login] 类型为String ['hat', 'google', 'facebook', 'weixin'] "});
			}
		} catch(err) {
			return reject({status: 500, position, err});
		}
	})
}